blueprint:
  name: Applicatie status en notificatie (1.4)
  description: >
    Automatiseert statusverwerking van een applicatie via webhook en voert acties uit bij uitval of herstel.
    ✅ Vereist onderstaande helpers per applicatie-ID (bijv. "gps_log").
    ✅ Je kunt zelf acties opgeven bij herstel en/of uitval (lamp aan, TTS, Telegram, etc.).

    input_datetime:
      <<application>>_last_update:
        name: Laatste <<application>> update
        has_date: true
        has_time: true
        icon: mdi:crosshairs-gps

    input_number:
      <<application>>_message_count_5min:
        name: <<application>> berichten laatste 5 minuten
        min: 0
        max: 10000
        step: 1
        icon: mdi:crosshairs-gps

      <<application>>_message_count_24h:
        name: <<application>> berichten laatste 24 uur
        min: 0
        max: 10000
        step: 1
        icon: mdi:crosshairs-gps

      <<application>>_message_count_total:
        name: <<application>> totaal aantal berichten
        min: 0
        max: 100000
        step: 1
        icon: mdi:crosshairs-gps

domain: automation

input:
  webhook_id:
    name: Webhook ID
    selector:
      text:
  application_id:
    name: Applicatie ID
    selector:
      text:
  cooldown:
    name: Cooldown (seconden)
    default: 3600
    selector:
      number:
        min: 60
        max: 86400
        unit_of_measurement: seconds
  threshold_minutes:
    name: Drempel (minuten)
    default: 10
    selector:
      number:
        min: 1
        max: 120
        unit_of_measurement: minutes
  action_on_restore:
    name: Actie bij herstel
    description: Actie(s) die worden uitgevoerd als de verbinding hersteld is.
    default: []
    selector:
      action:
  action_on_failure:
    name: Actie bij uitval
    description: Actie(s) die worden uitgevoerd als er geen update is ontvangen binnen de drempel.
    default: []
    selector:
      action:

trigger:
  - platform: webhook
    webhook_id: !input webhook_id
    allowed_methods:
      - POST
    local_only: true
  - platform: time_pattern
    minutes: "/5"

variables:
  cooldown: !input cooldown
  threshold: !input threshold_minutes
  app_id: !input application_id
  last_update_entity: "input_datetime.{{ app_id }}_last_update"
  count_5min_entity: "input_number.{{ app_id }}_message_count_5min"
  count_24h_entity: "input_number.{{ app_id }}_message_count_24h"
  count_total_entity: "input_number.{{ app_id }}_message_count_total"
  notification_id: "{{ app_id }}_warning"

condition: []

action:
  - choose:
      - conditions: "{{ trigger.platform == 'webhook' }}"
        sequence:
          - choose:
              - conditions: "{{ trigger.json.timestamp is defined }}"
                sequence:
                  - service: input_datetime.set_datetime
                    target:
                      entity_id: "{{ last_update_entity }}"
                    data:
                      datetime: "{{ trigger.json.timestamp }}"
          - service: input_number.set_value
            data:
              entity_id: "{{ count_5min_entity }}"
              value: "{{ trigger.json.message_count_last_5min }}"
          - service: input_number.set_value
            data:
              entity_id: "{{ count_24h_entity }}"
              value: "{{ trigger.json.message_count_last_24h }}"
          - service: input_number.set_value
            data:
              entity_id: "{{ count_total_entity }}"
              value: "{{ trigger.json.message_count_total }}"
          - choose:
              - conditions: "{{ states('persistent_notification.' ~ notification_id) != 'unknown' }}"
                sequence:
                  - service: persistent_notification.dismiss
                    data:
                      notification_id: "{{ notification_id }}"
                  - choose:
                      - conditions: "{{ action_on_restore | length > 0 }}"
                        sequence: !input action_on_restore

      - conditions: "{{ trigger.platform == 'time_pattern' }}"
        sequence:
          - condition: template
            value_template: >
              {% set last_update = states(last_update_entity) %}
              {{ last_update != 'unknown' and
                 (now() - last_update | as_datetime).total_seconds() > threshold * 60 }}
          - condition: template
            value_template: >
              {% set notif = 'persistent_notification.' ~ notification_id %}
              {% set last_notif = state_attr(notif, 'created_at') %}
              {{ last_notif is none or
                 (now() - last_notif | as_datetime).total_seconds() > cooldown }}
          - service: persistent_notification.create
            data:
              title: "⚠️ {{ app_id }}"
              message: "Geen update ontvangen sinds {{ states(last_update_entity) }}."
              notification_id: "{{ notification_id }}"
          - choose:
              - conditions: "{{ action_on_failure | length > 0 }}"
                sequence: !input action_on_failure
